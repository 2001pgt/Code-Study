정리
2024.12.30
자바에서 배열은 출력을 할수 없다 -> 배열의 주소를 출력함
 System.out.println(Arrays.toString(arr)); // 출력: [1, 2, 3, 4] 방식 사용
아니면 직접 for문으로 배열을  출력하는 함수를 만들거나

2024.12.31
정수형 변수에 문자를 저장하면 해당 문자의 아스키코드값이 저장된다.
예)int charNum = my_string.charAt(idx);

2025.01.05
자바는 포인터가 없기 때문에 swap메서드를 사용 하기위해서 배열을 참조해서 값을 바꿔야한다.
1. 배열을 사용
배열은 참조 타입(reference type)이므로, 배열 요소를 수정하면 원본 값에 영향을 미칩니다.
2. 사용자 정의 클래스 사용
객체를 통해 값을 감싸면 참조 타입으로 처리되어 스왑이 가능합니다.

2025.01.06
ArrayList를 정수 배열로 바꿀 때는 stream사용한 방법보다 for문으로 수동변경하는게 훨씬 
빠르다.
 // ArrayList를 int[]로 변환 (수동 방식)
        int[] intArray = new int[arrayList.size()];
        for (int i = 0; i < arrayList.size(); i++) {
            intArray[i] = arrayList.get(i);
        }

2025.01.09
자바에서 이진수 덧셈을 하는법
1. 이진수를 10진수로 변환.
2. 10진수로 덧셈 수행.
3. 결과를 다시 이진수로 변환
        int num1 = Integer.parseInt(bin1, 2);
        int num2 = Integer.parseInt(bin2, 2);
        int sum = num1 + num2;
        String answer = Integer.toBinaryString(sum);

2025.01.14 
자바의 문자열 형변환
보통 문자열->정수나 이 반대를 많이 하는데 
이 때 방법은 Integer.parseInt() 또는 Integer.valueOf()가 있다.
parseInt 는 문자열을 단순히 int 로만 변경해주며 성능은 valueOf()보다 더 좋다
그럼 valueOf를 왜 쓰냐고 할 수 있지만 valueOf는 문자열을 
객체형 Integer로 만들어서 다양한 메서드로 조작하기 위해 사용한다.
Java5 이후 버전 부터 int 변수에 Integer를 저장하면 자동으로 int 바꿔주기 때문에 우리가
오류가 나지 않을뿐이다.
결론 단순 문자열을 정수로 변환하기만 원한다면 parseInt()
정수로 변환해서 다양한 매서드를 사용하고 싶다면 valueOf()-> Collection 클래스같은...

2025.01.16
unreachable statement 오류
public String solution(int num) {
        if(num % 2 == 0){
            return "Even";
        } 
        else {
            return "Odd";
        }
        return "Odd";
    }
위 코드는 원래 라면 있어야 할 마지막 리턴 문이 필요없다.
왜냐하면 if-else문 내에서 반드시 return이 발생 하기 때문에 마지막 리턴은 도달 할 수없다.
그래서 unreachable statement 오류가 뜬다.
이는 마지막 리턴문을 삭제하면 해결된다.


2025.01.18
class Solution {
    public long[] solution(int x, int n) {
        long[] arr = new long[n];
        for(int i=0;i<n;i++){
            arr[i] = (i+1)*x;
        }
        return arr;
    }
}
해당 코드는 문제점이 있다.
i+1 과 x의 곱이 int 의 범위를 넘어서면 오버플로우가 발생한다.
이를 해결하기 하기 위해서는 x 나 i+1 둘중 하나가 long타입이거나 
계산한 결과를 long으로 타입변환을 해주면 된다.
먼저 x를 long으로 바꾸는건 함수 매개변수에 long x를 넣어주거나 (long)x를 해준다.
i+1를 long으로 바꾸는건 (long)i+1을해준다.
혹시 for 문안의 int i=0 을 long i=0으로 바꿔도 되지않을까 해서 해봤더니 이 때는 arr[i]에 들어가는
인덱스 값의 자료형은 int이어야 해서 오류가 발생한다.
새로 알게된 점: 인덱스 값의 자료형은 int여야 한다.

2025.02.01
자바에서 char [] 형태의 빈 문자 배열을 생성하면 원소는 "\0"(널 문자)로 채워진다.

2025.02.04
Math.max(int x.int y) 는 둘중 더큰값을 반환한다.

2025.02.05 
문자열을 문자 배열로 변경하는 방법
1. char[] charArray = s.toCharArray();
2. 새로운 문자 배열을 생성해서 charAt()매서드로 하나씩 넣어주기

문자배열을 문자열로 변경하는 방법
1. String str = new String(charArray); 
2. String str = String.valueOf(charArray); 
3. StringBuilder sb = new StringBuilder();
        for (char c : charArray) {
            sb.append(c);
        }
        
        String str = sb.toString(); // 문자 배열을 문자열로 변환
3번은 성능 최적화 가능

2025.02.11 
1. String -> Long
Long.parseLong(String s);

2. NumberFormatException 
문자열을 숫자로 변환할 때 형식이 잘못된 경우 발생하는 예외
Integer.parseInt(), Long.parseLong(), Double.parseDouble() 같은 메서드를 사용할 때 문자열이 숫자로 변환할 수 없는 형식이면 발생


2025.02.13 
split()매서드

1. split(String regex)	                 regex를 기준으로 문자열을 나누어 배열 반환
2. split(String regex, int limit)	limit   개수만큼 분할
3. split("[,;:]")	                         여러 개의 구분자로 나누기
4. split("\\s+")	                         연속된 공백 제거
5. split("\\.")	                         . (점)을 기준으로 나눌 때 \\. 사용
6. split(",", -1)	                         끝의 빈 문자열까지 포함


정규 표현식	의미
.			아무 문자 한 개
\d			숫자 (0-9)
\w			문자 (a-z, A-Z, 0-9, _)
\s			공백 (스페이스, 탭, 개행)
+			1회 이상 반복
*			0회 이상 반복
?			0 또는 1번 등장
{n,m}			최소 n번 ~ 최대 m번 반복
[a-zA-Z]		알파벳 대소문자
[^abc]		a, b, c가 아닌 문자
`(A			B)`

split("\\s")과 split("\\s+")의 차이 
전자는 공백 한개를 기준으로 나누기 때문에 split(" ")과 동일한 결과
후자는 연속된 공백들을 하나의 구분자로 처리하기 때문에 hello   world!와 같은 공백이 여러개인
문장이 나와도 hello, world! 두개로 구분해줌

2025.02.17
아스키 코드 활용

코드				설명									결과
c = c + n;			❌ int 값을 char에 직접 대입 불가 → 오류 발생	❌ 컴파일 에러
c = (char) (c + n);	✅ (char)를 사용해 형 변환하면 해결			✅ 정상 실행
c += n;			✅ += 사용 시 자동 형 변환됨				✅ 정상 실행

2025.02.23
자바 ArrayList 사용시 정렬을 하고싶다면
Collections.sort()매서드를 사용한다.
리버스는 Collections.reverse() 를 사용 
내림차순으로 정렬하고 싶다면 정렬 후 리버스
일반 배열을 정렬 하고싶다면 =
Arrays.sort()
내림차순 정렬은 직접구현 하거나
자료형을 Integer로 바꿔 
Arrays.sort(score,Comparator.reverseOrder());을 사용한다.

2025.02.24
"one4seveneight"	 를 1478 로 바꾸는것 처럼 문자열의 특정 부분을 내가 원하는 형태로 바꾸는방법
replace 와 replaceAll이 있다. https://coding-factory.tistory.com/128 블로그 참고
둘다 문자열에서 매서드의 첫번째 인자를 두번째 인자로 바꾸는 역할을 하는데
이때 replace는 [0~9]와 같은 정규식을 받을 수 없고 그대로 문자열로 받아드림 대신 속도가 빠르다
replaceAll은 정규식으로 첫번째 인자를 받는다 그래서 유연하고 간단한 조작이 가능하지만 성능면에서 부족하다.
그래서 내가 정규식을 사용해서 문자열을 바꾸고 싶다면 replaceAll
정규식을 제외한 문자열 치환을 하고 싶다면 replace를 사용한다.
예시) replace와 replaceAll 의 속도비교 
1. replaceAll
메모리: 72.9 MB, 시간: 0.56 ms
class Solution {
    public int solution(String s) {
        String[] strArr = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
        for(int i = 0; i < strArr.length; i++) {
            s = s.replaceAll(strArr[i], Integer.toString(i)); 이때는
        }
        return Integer.parseInt(s);
    }
}
2. replace
메모리: 80.4 MB, 시간: 0.11 ms
class Solution {
    public int solution(String s) {
        String[] strArr = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"};
        for(int i = 0; i < strArr.length; i++) {
            s = s.replace(strArr[i], Integer.toString(i));
        }
        return Integer.parseInt(s);
    }
}
예시를 보다시피 replace의 속도가 현저히 빠르다는 것을 볼 수있다.

2025.02.25 
HashMap 클래스
1. 생성
 HashMap<키 자료구조,값 자료구조> 객체명 = new HashMap<>();
2. 요소 추가 (put 메서드) 
 객체명.put(키,값); // 키값이 중복될 경우 값을 덮어쓰기함
3. 요소 조회 (get 메서드)
객체명.get(키) // 키가 존재하지 않으면 null 반환
4. 키,값 존재 여부 확인 (containsKey, containsValue 메서드)
객체명.containsKey(키);
객체명.containsValue(값);
5. 요소 삭제 (remove 메서드)
객체명.remove(키);
6. 기타 유용한 메서드
size() // HashMap에 저장된 엔트리의 개수를 반환합니다.

isEmpty() // HashMap이 비어있는지 확인합니다.

clear() // 모든 엔트리를 삭제합니다.

// 개념
HashMap의 주요 연산(삽입, 검색, 삭제)은 평균적으로 **O(1)**의 시간 복잡도를 가집니다.
 그러나 해시 충돌이 발생할 경우, 특히 모든 키가 동일한 해시값을 갖는 극단적인 상황에서는 내부 버킷이 연결 리스트로 구성되어 **O(n)**의 시간 복잡도를 가질 수 있습니다.
 Java 8부터는 이러한 최악의 경우를 개선하기 위해, 일정 수준 이상의 충돌이 발생하면 연결 리스트를 균형 이진 검색 트리(레드-블랙 트리)로 변환
이 경우 최악의 시간 복잡도는 **O(log n)
평균 경우: O(1)
최악의 경우 (Java 7 이하): O(n)
최악의 경우 (Java 8 이상): O(log n) (해시 충돌이 많을 경우)


2025.02.28
Priority Queue 자료구조
min-heap을 사용 // 오름차순정렬 -> 내림차순으로 변경가능 Comparator.reverseOrder() 사용
시간복잡도
삽입 (offer/add): O(log n)
새로운 요소를 추가할 때 힙 구조를 유지하기 위해 로그 시간 내에 재정렬합니다.

삭제 (poll/remove): O(log n)
최상위(우선순위가 가장 높은) 요소를 제거한 후, 힙 재구성이 필요합니다.

조회 (peek/element): O(1)
큐의 최상위 요소를 단순히 반환하기 때문에 상수 시간 내에 수행됩니다.

크기 확인 (size): O(1)
내부 변수로 크기를 관리하여 즉시 반환합니다.

메서드	설명
offer(E e)	새로운 요소를 큐에 추가합니다. 삽입에 실패하면 false를 반환합니다.
add(E e)	요소를 추가합니다. 삽입 실패 시 예외를 발생시킵니다.
peek()	큐의 최상위 요소를 조회하며, 삭제하지 않습니다. 큐가 비어있으면 null을 반환합니다.
element()	peek()와 유사하지만, 큐가 비어있을 경우 예외를 발생시킵니다.
poll()		큐의 최상위 요소를 삭제하고 반환합니다. 큐가 비어있으면 null을 반환합니다.
remove()	큐의 최상위 요소를 삭제하고 반환합니다. 큐가 비어있으면 예외를 발생시킵니다.
size()		큐에 저장된 요소의 개수를 반환합니다.
isEmpty()	큐가 비어있는지 여부를 확인합니다.
clear()	큐의 모든 요소를 제거합니다.
iterator()	큐 내 요소들을 순회할 수 있는 Iterator를 반환합니다.
toArray()	큐의 요소들을 배열로 변환하여 반환합니다.


2025.03.01
1. 비트 연산자 (|)
두 이진수의 각 자리수를 비교하여, 둘 중 하나라도 1이면 결과는 1이 되는 연산자입니다.
2. Integer.toBinaryString(int i)
정수를 이진수 문자열로 변환합니다.
3. String.format(String format, Object... args)
지정된 포맷에 따라 문자열을 생성합니다. 여기서는 오른쪽 정렬하여 전체 길이를 맞추기 위해 사용됩니다.

포맷 지정자의 구성
%[인덱스$][플래그][너비][.정밀도]변환문자
인덱스 (Index):

여러 개의 인자가 있을 때, 특정 인자를 선택할 수 있습니다.
예: %2$s 는 두 번째 인자를 문자열로 출력.
플래그 (Flags):

-: 좌측 정렬
+: 부호를 항상 표시
0: 숫자 앞에 0으로 채움
,: 천 단위 구분 기호 사용
예: %05d 는 5자리의 정수를 0으로 채워 출력 (예: 00042).
너비 (Width):

출력할 최소 문자 수를 지정합니다. 지정한 너비보다 값의 길이가 짧으면 공백 또는 지정한 플래그에 따라 다른 문자가 채워집니다.
예: %10s 는 최소 10자리의 문자열로 출력 (길이가 부족하면 앞에 공백 추가).
정밀도 (Precision):

숫자나 문자열의 출력 길이를 제한합니다.
예: %.2f 는 소수점 이하 2자리까지 출력, %10.2f 는 전체 너비 10자리에서 소수점 이하 2자리 출력.
변환문자 (Conversion):

실제로 인자를 어떤 형식으로 출력할지 결정합니다 (예: s, d, f 등).

4. substring(int beginIndex) 및 substring(int beginIndex, int endIndex)
문자열의 일부를 추출하는 메서드입니다. 이 코드에서는 문자열의 마지막 n글자를 추출하는 데 사용됩니다.


2025.03.04
Queue 
FIFO(First-In-First-Out) 구조로, 먼저 들어간 요소가 먼저 나오는 자료구조
Java에서는 Queue 인터페이스로 제공하며, 다양한 구현체가 있음

주요 구현체
LinkedList: 		기본 큐 기능과 List 기능을 모두 제공
PriorityQueue: 	요소를 우선순위에 따라 정렬하여 관리
ArrayDeque: 	양쪽 끝에서 요소를 추가/제거할 수 있는 덱(Deque)

주요 메서드
추가: offer(E e), add(E e)
제거: poll(), remove()
확인: peek(), element()

set

정의
Set은 중복된 요소를 허용하지 않는 컬렉션을 나타내며, Collection 인터페이스를 상속받습니다.

특징
중복 없음: 같은 객체(또는 동일한 값)의 여러 저장을 허용하지 않습니다.
순서: 구현체에 따라 요소의 저장 순서가 달라질 수 있습니다.

주요 구현체 
HashSet: 순서를 보장하지 않음
LinkedHashSet: 입력 순서를 유지함
TreeSet: 정렬된 순서를 유지함


주요 메서드 (Collection 인터페이스에서 상속됨 , Queue도 Collection인터페이스를 상속 받으므로 동일하게 가짐) 
add(E e): 			요소를 추가 (중복된 경우 추가되지 않음)
remove(Object o): 	특정 요소를 제거
contains(Object o): 	특정 요소의 존재 여부 확인
size(): 			저장된 요소의 개수 반환
isEmpty(): 			집합이 비어있는지 확인

2025.03.08
함수에서 return 할때 {1,2,3}같은 배열을 리턴하고 싶다면
배열앞에 new int[]를 붙여 new int[]{1,2,3}을 만든다.

2025.03.22
스택 
java.util.Stack 사용
Stack<Integer> stack = new Stack<>(); // 객체 생성
특징:
Vector를 상속받아 구현됨
스레드 안전(Thread-Safe)하나, 성능 면에서는 다소 느릴 수 있음


Deque 인터페이스의 구현체 사용
Deque<Integer> stack = new ArrayDeque<>(); // 객체 생성

특징:
스택과 큐 기능을 모두 제공
스레드 안전하지 않지만 일반적으로 빠름
push(), pop(), peek() 등의 메서드 사용 가능


스택의 주요 메서드
push(T item)
스택의 맨 위에 요소를 추가하는 메서드

pop()
스택의 맨 위 요소를 제거하고 반환하는 메서드
스택이 비어 있을 때 호출하면 예외가 발생할 수 있음

peek()
스택의 맨 위 요소를 제거하지 않고 확인하는 메서드
스택이 비어 있으면 예외 발생 가능

isEmpty()
스택이 비어있는지 확인하는 메서드



자바에서 입력을 받는 다양한 방법

1. scanner 클래스

특징:
사용하기 쉽고, 토큰 단위(공백, 개행 등)로 데이터를 읽어올 수 있음
nextInt(), nextLine(), next() 등 다양한 메서드 제공

장점:
간편하고 직관적인 사용법
다양한 데이터 타입 입력 지원

단점:
nextInt() 등 숫자 입력 후 남은 개행 문자를 처리해주어야 함 (예: sc.nextLine()을 추가로 호출하여 개행문자 제거)
대량의 입력 처리 시 성능이 떨어질 수 있음

Scanner 클래스 사용 방법

import java.util.Scanner;

public class ScannerExample {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // 정수 입력 받기
        System.out.print("정수를 입력하세요: ");
        int number = sc.nextInt();

        // nextInt() 호출 후 남아있는 개행문자 제거
        sc.nextLine();

        // 한 줄 전체 문자열 입력 받기
        System.out.print("문자열을 입력하세요: ");
        String line = sc.nextLine();

        // 단어 단위로 입력 받기 (공백 기준)
        System.out.print("단어를 입력하세요: ");
        String word = sc.next();

        System.out.println("입력받은 정수: " + number);
        System.out.println("입력받은 문자열: " + line);
        System.out.println("입력받은 단어: " + word);
        
        sc.close();
    }
}

2. BufferedReader 클래스
특징:
InputStreamReader와 함께 사용하여 한 줄 전체를 읽어올 수 있음
문자열로 입력받은 후 필요한 타입으로 변환

장점:
대용량 데이터 입력 처리에 적합 (성능이 우수함)
한 줄 단위 입력이 편리

단점:
데이터 타입 변환 작업이 필요함 (예: Integer.parseInt() 등)
코드가 상대적으로 복잡해질 수 있음

BufferedReader 클래스 사용 방법
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class BufferedReaderExample {
    public static void main(String[] args) {
        // BufferedReader 생성
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        try {
            // 한 줄 전체 입력 받기
            System.out.print("문자열을 입력하세요: ");
            String line = br.readLine();
            
            // 정수 입력 시 문자열을 파싱해야 함
            System.out.print("정수를 입력하세요: ");
            int number = Integer.parseInt(br.readLine());
            
            System.out.println("입력받은 문자열: " + line);
            System.out.println("입력받은 정수: " + number);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


3. Console 클래스
특징:
콘솔 환경에서 직접 입력을 받을 때 사용
readLine()이나 readPassword() 메서드 제공

장점:
비밀번호 입력 등 보안에 민감한 입력 처리에 유용함

단점:
IDE에 따라 지원되지 않을 수 있음 (예: 일부 개발 환경에서는 null을 반환)

Console 클래스 사용 방법
public class ConsoleExample {
    public static void main(String[] args) {
        // System.console()은 IDE(예: Eclipse, IntelliJ)에서는 null을 반환할 수 있음.
        java.io.Console console = System.console();
        if (console != null) {
            // 한 줄 전체 입력 받기
            String line = console.readLine("문자열을 입력하세요: ");
            
            // 비밀번호 입력 받기 (입력된 내용을 char 배열로 반환)
            char[] password = console.readPassword("비밀번호를 입력하세요: ");
            
            System.out.println("입력받은 문자열: " + line);
            System.out.println("입력받은 비밀번호 길이: " + password.length);
        } else {
            System.out.println("콘솔을 지원하지 않는 환경입니다.");
        }
    }
}

2025.03.30
static 키워드
클래스 내에서 함수를 생성하고 메인 함수에서 이를 실행하면 오류가 발생
 -> 왜 안될까? -> static 여부 차이

자바에서 변수나 메서드를 정의할 때 static을 붙이면, **“객체(instance)를 생성하지 않아도 접근할 수 있게 만든다”**는 뜻이다.
-> 그럼 객체를 생성하면 접근이 가능한가? -> O 그렇다. 실제 예시를 보자
예)✅ 방법 1: sayHello()도 static으로 만들기
public class Main {
    public static void sayHello() {
        System.out.println("Hello");
    }

    public static void main(String[] args) {
        sayHello(); // ✅ 정상 작동
    }
}
이렇게 같은 클래스 내에서 함수를 생성할때  static를 붙여주면 메인 메서드에서 사용가능

✅ 방법 2: 객체를 생성해서 호출하기
public class Main {
    public void sayHello() {
        System.out.println("Hello");
    }

    public static void main(String[] args) {
        Main m = new Main();  <-- 메인 클래스의 sayHello 객체 생성
        m.sayHello(); // ✅ 정상 작동
    }
}
이렇게 두가지 방법이 가능하다.

그럼 메서드안에서 함수를 정의하고 실행하는건 안되는 걸까?
-> 불가능하다. -> 자바에서 메서드는 클래스안에서만 정의 가능
만약 메서드 안에서만 잠깐 쓸 함수가 필요하면?
-> 람다나 익명클래스를 사용하는방식으로 대신한다.

그럼 람다와 익명클래스가 뭘까?
->  이 두가지를 알기 위해서 먼저 익명함수에 대해서 알아보자
-> 익명함수는 "이름이 없는 함수" 를 뜻한다.
public void sayHello() {
    System.out.println("Hello!");
}
보통 이렇게 이름 있는 함수를 생성함

하지만 익명 함수는:
이름 없이 필요한 곳에 바로 써서 그 순간만 사용하고 버리는 함수다.

그런데 자바에는 익명함수를 직접 쓰지 못한다. 
-> 그래서 익명 클래스로 비슷하게 흉내낸것
예)
Runnable r = new Runnable() {
    public void run() {
        System.out.println("Hi!");
    }
};

익명으로 인터페이스 Runnable을 구현한 익명 클래스다.
↑ 이렇게 클래스 이름을 안 주고 그냥 new Runnable() {} 라고 함.
그래서 "익명 클래스"고, 여기에 들어간 run()은 익명 클래스 안에서만 쓰이는 메서드다.

그리고 이 익명 클래스가 보통 짧은 동작 하나를 담고 있어서,
함수처럼 쓰이기 때문에 “익명 함수”처럼 사용된다고 말한다.

람다는 이 익명 클래스 패턴을 더 간단하게 바꾼 것
Runnable r = () -> System.out.println("Hi!");

2025.04.01
BufferedReader br = new BufferedReader(new InputStreamReader(System.in))로 여러 정수를 공백을 기준으로 각각 입력받는방법

String input = br.readLine();           // "4 3" 전체를 문자열로 읽음
        String[] tokens = input.split(" ");       // 공백을 기준으로 분리
        int n = Integer.parseInt(tokens[0]);   // 첫 번째 숫자 파싱
        int k = Integer.parseInt(tokens[1]);   // 두 번째 숫자 파싱
입력받은 문자열을 공백을 기준으로 나눠 문자열배열에 넣고 각각의 문자열을 정수로 변환


