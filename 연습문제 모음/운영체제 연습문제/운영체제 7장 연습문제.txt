운영체제 7장 연습문제

문제 1. 다음 중 교착상태가 발생하기 위한 코프만(Coffman) 조건에 해당하지 않는 것은 무엇인가?

A. 상호 배제
B. 자원의 선점 가능
C. 점유하면서 대기
D. 환형 대기

(출제의도: 4대 조건 중 비부합 항목 식별)

문제 2. 다음은 자원 할당 상태를 보여주는 예이다. 이 상태는 교착상태인가? 그렇다면 이유는?

makefile
복사
편집
P1: R1 요청 중, R2 보유
P2: R2 요청 중, R3 보유
P3: R3 요청 중, R1 보유
(출제의도: 원형 대기 구성 확인 및 추론 능력)

문제 3. 다음 중 운영체제가 **교착상태 회피(avoidance)**를 위해 수행해야 하는 전략으로 가장 적절한 것은?

A. 자원 사용을 전부 선점한다
B. 프로세스가 최대 필요한 자원을 사전에 신고하도록 한다
C. 자원이 부족해도 일단 할당하고 나중에 감지한다
D. 자원은 항상 순서대로 할당한다

(출제의도: 회피 vs 예방 vs 감지 구분)

🧮 Section 2: Banker’s Algorithm & Safety Algorithm
문제 4. 다음은 Banker’s Algorithm에서 사용하는 데이터 구조이다. 빈칸에 들어갈 알맞은 용어는?

__________: 현재 시스템에서 사용 가능한 자원의 수

__________: 프로세스가 최대 요청할 수 있는 자원의 수

__________: 프로세스가 현재 할당받은 자원의 수

__________: 프로세스가 앞으로 필요로 하는 자원의 수

(출제의도: 용어 구분 - Available, Max, Allocation, Need)

문제 5. 다음 상태에서 프로세스 P1의 요청 [1, 0, 2]는 허용 가능한가? 안전 상태인지 판단하라.

makefile
복사
편집
Available: [3, 3, 2]

Allocation:
P0: [0, 1, 0]
P1: [2, 0, 0]
P2: [3, 0, 2]
P3: [2, 1, 1]
P4: [0, 0, 2]

Max:
P0: [7, 5, 3]
P1: [3, 2, 2]
P2: [9, 0, 2]
P3: [2, 2, 2]
P4: [4, 3, 3]
(출제의도: Request 검증 + Safety 판단)

문제 6. 다음 중 **불안정 상태(unsafe state)**에 대한 설명으로 옳지 않은 것은?

A. 불안정 상태에서는 항상 교착상태가 발생한다
B. 안전 상태에서는 교착상태가 발생하지 않는다
C. 불안정 상태는 교착상태로 이어질 수 있다
D. Safety Algorithm은 불안정 상태를 방지하기 위해 사용된다

(출제의도: 불안정과 교착상태의 개념 구분)

🔄 Section 3: 알고리즘 실행 과정
문제 7. 아래 상황에서 P2는 요청 [3, 0, 0]을 보냈다. 다음 중 실행 순서를 계산하기 위해 적용할 수 있는 알고리즘은?

A. Resource Allocation Graph
B. Banker’s Algorithm
C. Circular Wait Detector
D. FIFO Scheduling

(출제의도: 요청 → 안전성 검사 → 알고리즘 식별)

문제 8. Banker’s Algorithm의 안전성 검사에서 사용되는 변수 Work와 Finish의 초기 상태는 어떻게 설정되는가?

A. Work = Max, Finish = true
B. Work = Available, Finish[i] = false
C. Work = Need, Finish[i] = true
D. Work = Allocation, Finish[i] = false

(출제의도: Safety Algorithm 절차 이해)

문제 9. 아래 코드에서 교착상태가 발생하는 이유를 4가지 조건에 기반하여 설명하시오.

c
복사
편집
pthread_mutex_lock(&lock1);
sleep(2);
pthread_mutex_lock(&lock2);
(출제의도: 상호배제 + 점유+대기 + 비선점 + 원형대기 조건 적용)

정답:
B
그렇다
B
Available,MAX,Allocation,NEED
안됨-> 가능 했다 계산 오류
A
B
몰라 -> 상호 배제 (lock1, lock2는 배타적 접근)

점유하면서 대기 (lock1 보유 상태에서 lock2 요청)

비선점 (lock1/lock2는 강제로 회수 불가)

원형 대기 (두 스레드가 서로 상대 락을 기다림)





