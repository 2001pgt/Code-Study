운영체제 8장 연습문제

1.메모리 계층 구조
냉장고(fridge), 식료품 저장실(pantry), 마트(market)에 비유할 때, CPU 레지스터는 냉장고, 캐시는 식료품 저장실, 메인 메모리는 소형 슈퍼마켓, 보조기억장치는 대형 마트라고 할 수 있다. 이 비유에서 참조의 지역성(locality of reference) 가 메모리 계층화의 효율을 높이는 이유로 옳은 것은?
a) CPU가 한 번에 모든 기억장치에 접근하므로 속도가 일정해진다.
b) 자주 사용하는 데이터가 위(레지스터·캐시)에 머물러 있어 접근 시간이 줄어든다.
c) 메인 메모리와 보조기억장치 사이 데이터 이동을 완전히 없앨 수 있다.
d) 모든 데이터가 처음부터 캐시에 로드되어 메모리 활용률이 최적화된다.
(참조: 8장 메모리관리.pdf, p.8)

2.논리 주소 vs. 물리 주소
우편물 분류 시스템에 빗대어, 논리 주소는 ‘우체국 분류표상의 주소’, 물리 주소는 ‘실제 배달지 주소’에 해당한다. 이 비유에서 MMU(Memory Management Unit)가 하는 일로 가장 적절한 것은?
a) 모든 우편을 분류표 없이 직접 배달한다.
b) 논리 주소를 물리 주소로 변환하고 범위(limit)를 검사한다.
c) 우편물을 압축해 보조기억장치에 저장한다.
d) 분실 우편물에 대한 복구 작업만 수행한다.
(참조: 8장 메모리관리.pdf, p.12)

3.연속 할당의 내부·외부 단편화
건물의 방을 여러 크기로 나눠 세입자를 배치할 때, 빈 공간이 작게 남아 활용되지 못하는 내부 단편화의 예는?
a) 100㎡짜리 방에 90㎡ 세입자가 들어가고, 10㎡가 남아 다른 세입자가 못 쓰는 경우
b) 여러 방 사이에 5㎡씩 모여 있는 빈 공간이 사용되지 못하는 경우
c) 세입자가 방을 옮길 때마다 복도에 물건이 쌓이는 경우
d) 미리 방 크기를 고정하지 않고 그때그때 나눠 주는 경우
(참조: 8장 메모리관리.pdf, p.25)

4.고정 크기 vs. 가변 크기 파티션
고정 크기 파티션과 가변 크기 파티션 방식의 차이가 가장 잘 설명된 것은?
a) 고정 크기는 파티션 크기를 동적으로 조절, 가변 크기는 고정됨
b) 고정 크기는 내부 단편화 유발, 가변 크기는 외부 단편화 유발
c) 고정 크기는 외부 단편화만, 가변 크기는 내부 단편화만 발생
d) 고정 크기는 분할 방식, 가변 크기는 연결 방식
(참조: 8장 메모리관리.pdf, p.23)

5.홀 선택 알고리즘 – Best‐fit
다음 홀(hole)들이 있고, 요청 크기 순서대로 35 MB, 20 MB, 50 MB, 30 MB를 배치할 때, Best‐fit 전략의 결과로 남는 홀 크기의 순서(남은 크기만 나열)는?

Hole ID	크기 (MB)
H1	60
H2	25
H3	90
H4	40

a) 25, 5, 90, 10
b) 25, 0, 40, 10
c) 25, 5, 40, 10
d) 0, 5, 40, 10
(참조: 8장 메모리관리.pdf, p.30)

6.Worst‐fit 전략의 특징
캐리어(요청) 크기가 가장 큰 홀에 배치하는 Worst‐fit 전략의 장점은?
a) 항상 내부 단편화를 최소화한다.
b) 큰 홀을 먼저 잘게 분할해 외부 단편화를 줄인다.
c) 작은 홀들만 남겨서 관리가 용이해진다.
d) 모든 요청을 무조건 성공시킨다.
(참조: 8장 메모리관리.pdf, p.29)

7.세그먼테이션의 외부 단편화
도서관 책장을 코드·데이터·스택·힙으로 구분하는 세그먼테이션 구조에서, 시간이 지날수록 책장 사이사이에 빈 공간이 생기는 이유는?
a) 모든 세그먼트가 일정 크기로 고정되기 때문이다.
b) 각 세그먼트가 동적으로 크기를 늘렸다 줄였다 하며 간격이 벌어지기 때문이다.
c) 페이지 단위로 할당하므로 남는 페이지가 분산되기 때문이다.
d) 프로세스가 종료될 때마다 모든 세그먼트가 한꺼번에 해제되기 때문이다.
(참조: 8장 메모리관리.pdf, p.36)

8.세그먼트 오프셋 예외
세그먼트 테이블에 Base=5 120, Limit=2 048인 세그먼트 1에서 옵셋(offset) 2 200을 참조하면 어떤 일이 발생하는가?
a) 정상적으로 물리 주소 7 320이 참조된다.
b) 옵셋이 limit을 초과하여 세그멘테이션 예외(segmentation fault)가 발생한다.
c) 하드웨어가 자동으로 limit를 늘려준다.
d) MMU가 자동으로 다른 세그먼트를 참조하도록 매핑한다.
(참조: 8장 메모리관리.pdf, p.36)

9.주소 변환 성능 개선 (TLB)
TLB(Translation Lookaside Buffer)는 어떤 역할을 해 성능을 개선하는가?
a) 페이지 크기를 자동으로 조절한다.
b) 자주 쓰는 페이지 변환 결과를 캐시에 저장해 빠르게 재사용한다.
c) 모든 페이지를 미리 물리 메모리에 로드한다.
d) 논리 주소 없이 바로 물리 주소로 접근하게 한다.
(참조: 8장 메모리관리.pdf, p.12)

10.외부 단편화 최소화 토론형
다음 상황에서 외부 단편화를 최소화하고 싶다면, 어떤 홀 선택 전략을 쓰는 것이 가장 적절한가?

빈 홀: 100, 50, 30, 10 KB

요청 순서: 25 KB, 70 KB, 15 KB

a) First‐fit
b) Best‐fit
c) Worst‐fit
d) Next‐fit
(참조: 8장 메모리관리.pdf, p.29)



정답
B
B
A
B
C

B
X -> B
X -> B
B
C -> B


7.세그먼테이션의 외부 단편화 X -> B
도서관 책장을 코드·데이터·스택·힙으로 구분하는 세그먼테이션 구조에서, 시간이 지날수록 책장 사이사이에 빈 공간이 생기는 이유는?
a) 모든 세그먼트가 일정 크기로 고정되기 때문이다.
b) 각 세그먼트가 동적으로 크기를 늘렸다 줄였다 하며 간격이 벌어지기 때문이다.
c) 페이지 단위로 할당하므로 남는 페이지가 분산되기 때문이다.
d) 프로세스가 종료될 때마다 모든 세그먼트가 한꺼번에 해제되기 때문이다.
(참조: 8장 메모리관리.pdf, p.36)


8.세그먼트 오프셋 예외 X -> B
세그먼트 테이블에 Base=5 120, Limit=2 048인 세그먼트 1에서 옵셋(offset) 2 200을 참조하면 어떤 일이 발생하는가?
a) 정상적으로 물리 주소 7 320이 참조된다.
b) 옵셋이 limit을 초과하여 세그멘테이션 예외(segmentation fault)가 발생한다.
c) 하드웨어가 자동으로 limit를 늘려준다.
d) MMU가 자동으로 다른 세그먼트를 참조하도록 매핑한다.
(참조: 8장 메모리관리.pdf, p.36)

10.외부 단편화 최소화 토론형 C -> B
다음 상황에서 외부 단편화를 최소화하고 싶다면, 어떤 홀 선택 전략을 쓰는 것이 가장 적절한가?

빈 홀: 100, 50, 30, 10 KB

요청 순서: 25 KB, 70 KB, 15 KB

a) First‐fit
b) Best‐fit
c) Worst‐fit
d) Next‐fit
(참조: 8장 메모리관리.pdf, p.29)











