운영체제 10장 연습문제

1.가상 메모리의 핵심 이점
가상 메모리 기법이 제공하는 주된 이점은 무엇인가?
a) 모든 프로세스를 디스크에만 저장해도 실행이 가능하다.
b) 프로세스 전체를 물리 메모리에 미리 적재하지 않아도 실행할 수 있다.
c) 페이지 크기를 동적으로 조절하여 내부 단편화를 완전히 제거한다.
d) 프로세스 간 메모리 보호가 자동으로 이루어지지 않는다.
(참조: 10장 가상 메모리.pdf, p.6)

2.요구 페이징(demand paging)
요구 페이징의 정의로 옳은 것은?
a) 프로세스가 시작될 때 모든 페이지를 메모리에 적재하는 기법
b) 현재 실행에 필요한 페이지만 물리 메모리에 적재하고, 나머지는 디스크에 둔다.
c) 고정 크기 파티션과 스와핑을 결합한 기법
d) 페이지가 수정될 때마다 즉시 스왑-아웃하는 기법
(참조: 10장 가상 메모리.pdf, p.12)

3.페이지 테이블 엔트리의 Present/Valid 비트
페이지 테이블 항목의 present/valid 비트(present bit)의 역할은?
a) 해당 페이지가 디스크의 스왑 영역에 있는지 여부를 표시한다.
b) 해당 페이지가 물리 메모리에 적재되어 있는지 여부를 표시한다.
c) 페이지가 수정되었는지 여부를 표시한다.
d) 페이지의 물리 프레임 번호를 저장한다.
(참조: 10장 가상 메모리.pdf, p.14)

4.페이지 폴트 발생 시 처리 순서
CPU가 액세스한 페이지가 물리 메모리에 없을 때(page fault), 운영체제가 가장 먼저 수행하는 일은?
a) 즉시 스왑-인 없이 디스크 I/O를 중단한다.
b) 빈 프레임을 찾거나 확보(swap-out)한 뒤, 디스크에서 해당 페이지를 읽어들인다.
c) 페이지 크기를 줄여 메모리에 적재한다.
d) 모든 페이지를 한 번에 스왑-인한다.
(참조: 10장 가상 메모리.pdf, pp.18–19)

5.쓰기 시 복사(COW, copy-on-write)
COW 기법의 핵심 아이디어로 옳은 것은?
a) fork() 시 부모 프로세스의 모든 페이지를 즉시 복사한다.
b) 부모와 자식이 실제로 페이지를 수정하려고 할 때에만 페이지를 복사한다.
c) 페이지를 읽을 때마다 새로운 프레임을 할당한다.
d) 자식 프로세스는 부모와 완전히 별개의 메모리 공간을 항상 갖는다.
(참조: 10장 가상 메모리.pdf, p.24)

6.스래싱(thrashing)의 주요 원인
시스템이 스래싱 상태에 빠지는 주된 원인은?
a) 다중프로그래밍 정도(DOM)가 너무 낮아서
b) 페이지 교체 알고리즘이 최적 알고리즘을 사용해서
c) 메모리에 비해 너무 많은 프로세스가 실행되어 프로세스별 할당 프레임이 부족해질 때
d) 모든 프로세스가 I/O만 수행할 때
(참조: 10장 가상 메모리.pdf, pp.30–31)

7.작업 집합(working set)
작업 집합이란 무엇을 가리키는가?
a) 프로세스가 시작 시 한 번만 참조하는 페이지들의 모임
b) 일정 시간 창(window) 내에 프로세스가 참조한 페이지들의 집합
c) 페이지 교체 대상이 된 페이지들의 집합
d) 물리 메모리 전체의 빈 프레임 집합
(참조: 10장 가상 메모리.pdf, p.33)

8.프레임 할당 – 균등 할당 vs. 비례 할당
“비례 할당(proportional allocation)”의 특징으로 옳은 것은?
a) 모든 프로세스에 동일한 개수의 프레임을 배정한다.
b) 프로세스 크기에 비례하여 프레임을 배정한다.
c) 최소/최대 워킹셋 크기를 미리 고정한다.
d) 페이지 교체가 일어날 때마다 할당량을 재조정한다.
(참조: 10장 가상 메모리.pdf, pp.42–43)

9.최적 교체(Optimal Replacement)
Optimal 알고리즘이 실무에서 직접 구현되지 않는 이유는?
a) 페이지 테이블 항목에 너무 많은 비트를 요구하기 때문이다.
b) 미래에 참조될 페이지를 미리 알 수 없기 때문이다.
c) 구현이 너무 간단하여 성능이 떨어지기 때문이다.
d) 모든 운영체제가 FIFO를 표준으로 채택하고 있기 때문이다.
(참조: 10장 가상 메모리.pdf, pp.50–51)

10.Clock(Second‐Chance) 알고리즘
Clock 알고리즘에서 희생 프레임(victim frame)을 선택하는 절차로 옳지 않은 것은?
a) 포인터가 가리키는 프레임의 참조 비트가 0이면 바로 선택한다.
b) 참조 비트가 1이면 0으로 클리어하고 포인터를 다음 프레임으로 이동한다.
c) 한 바퀴를 돌아도 참조 비트가 모두 1이면, 가장 오래전에 참조된 프레임을 선택한다.
d) 참조 비트가 1인 프레임은 즉시 스왑-아웃 대상이 된다.
(참조: 10장 가상 메모리.pdf, p.55)

정답:
b
b
b
b
b

c
b
b
b
d->c

10.Clock(Second‐Chance) 알고리즘 d->c
Clock 알고리즘에서 희생 프레임(victim frame)을 선택하는 절차로 옳지 않은 것은?
a) 포인터가 가리키는 프레임의 참조 비트가 0이면 바로 선택한다.
b) 참조 비트가 1이면 0으로 클리어하고 포인터를 다음 프레임으로 이동한다.
c) 한 바퀴를 돌아도 참조 비트가 모두 1이면, 가장 오래전에 참조된 프레임을 선택한다.
d) 참조 비트가 1인 프레임은 즉시 스왑-아웃 대상이 된다.
(참조: 10장 가상 메모리.pdf, p.55)
해설: 좀 애매한 문제다. c도 어떻게 보면 맞는 말이긴해 이다음 프레임이 가장 오래전참조된 
프레임이니까
근데 d도 틀린거임 0이 되고 또 걸리면 스왑 아웃임 ㅋㅋ










